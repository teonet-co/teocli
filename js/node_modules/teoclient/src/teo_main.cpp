/**.
 * File:   teo_main.cpp
 * Author: Alexander Ksenofontov <aksenofo@yahoo.ru>
 *
 * Created on August 3, 2016, 12:32 PM
 */

#include <stddef.h>
#include <sys/types.h>

#include "libteol0/teonet_l0_client.h"
#include "connector.h"
#include "exeption.h"

#include <nan.h>

//https://github.com/nodejs/nan/blob/master/doc/methods.md#api_nan_method

using namespace Nan;
using namespace v8;

NAN_METHOD(version) {
    info.GetReturnValue().Set(Nan::New<String>("1.1.1.1").ToLocalChecked());
}

NAN_METHOD(init) {
    teoLNullInit();
}

NAN_METHOD(cleanup) {
    teoLNullCleanup();
}

static int ww(1);

NAN_METHOD(connect) {

//    while(ww);

    Nan::HandleScope scope;

    auto p0(info[0]);
    auto p1(info[1]);

//    v8::Local<v8::Function> cons = Nan::New<v8::Function>(TeoExeption::constructor);
//    int arcv (3);
//    v8::Local<v8::Value> argv[arcv] = {
//	Nan::New<Integer>(100),
//	Nan::New<String>("vvv").ToLocalChecked(),
//	Nan::New<String>("ddd").ToLocalChecked()
//    };
//    cons->NewInstance(arcv, argv);

//    info.GetReturnValue().Set(TeoExeption::createNewInstance(100, "text"));

    Nan::ThrowError(TeoExeption::createNewInstance(100, "text"));

//    info.GetReturnValue().Set(cons->NewInstance(arcv, argv));

//     v8::FunctionCallbackInfo<v8::Value> ff;
//    Local<Value> argv[] = {};

//    TeoExeption::New(argv);

//    teoLNullConnectData* t(teoLNullConnect(std::string(*String::Utf8Value(p0)).c_str(), p1->IntegerValue()));
//    auto terrno(errno);
//    if(t == nullptr|| t->fd <= 0) {
	// failed to create connector.
//	if(t)
//	    free(t);
//	return ThrowException(ErrnoException(errno, "my message"));
//	return Nan::ThrowError("JJJJJJJJJJJJJJJJJJJJJJJ");
// Nan::ThrowError(Nan::ErrnoException(110, "teoLNullConnect", "dfdfdsfdsf", "ssssssssssssssssss"));
//    }
}

NAN_MODULE_INIT(Init) {
    Nan::Set(target, New<String>("version").ToLocalChecked(),
	GetFunction(New<FunctionTemplate>(version)).ToLocalChecked());
    Nan::Set(target, New<String>("init").ToLocalChecked(),
	GetFunction(New<FunctionTemplate>(init)).ToLocalChecked());
    Nan::Set(target, New<String>("cleanup").ToLocalChecked(),
	GetFunction(New<FunctionTemplate>(cleanup)).ToLocalChecked());
    Nan::Set(target, New<String>("connect").ToLocalChecked(),
	GetFunction(New<FunctionTemplate>(connect)).ToLocalChecked());

    Connector::Init(target);
    TeoExeption::Init(target);
}

NODE_MODULE(teoclient , Init)

