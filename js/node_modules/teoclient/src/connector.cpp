/**
 * File:   connector.cpp
 * Author: Alexander Ksenofontov <aksenofo@yahoo.ru>
 *
 * Created on August 3, 2016, 12:32 PM
 */


#include "connector.h"

//https://gist.github.com/bellbind/a68620383e0180b3afc6

using namespace Nan;
using namespace v8;

NAN_METHOD(Connector::New) {
    Nan::HandleScope scope;

    if (!info.IsConstructCall()) {
	// [NOTE] generic recursive call with `new`
	std::vector<v8::Local<v8::Value>> args(info.Length());
	for (std::size_t i = 0; i < args.size(); ++i) args[i] = info[i];
	auto inst = Nan::NewInstance(info.Callee(), args.size(), args.data());
	if (!inst.IsEmpty()) info.GetReturnValue().Set(inst.ToLocalChecked());
	return;
    }
//  auto name = Nan::To<v8::String>(info[0]).ToLocalChecked();
    auto object = new Connector;//(*Nan::Utf8String(name));
    object->Wrap(info.This()); // `Wrap` bind C++ object to JS object 
}

NAN_MODULE_INIT(Connector::Init) {
    Nan::HandleScope scope;
    auto cname = Nan::New("Connector").ToLocalChecked();
    auto ctor = Nan::New<v8::FunctionTemplate>(New);
    auto ctorInst = ctor->InstanceTemplate(); // target for member functions
    ctor->SetClassName(cname); // as `ctor.name` in JS
    ctorInst->SetInternalFieldCount(1); // for ObjectWrap, it should set 1

  // add member functions and accessors
//  Nan::SetPrototypeMethod(ctor, "getName", GetName);
//  auto pname = Nan::New("name").ToLocalChecked();
//  Nan::SetAccessor(ctorInst, pname, NameGet, NameSet);

    Nan::Set(target, cname, Nan::GetFunction(ctor).ToLocalChecked());
}

